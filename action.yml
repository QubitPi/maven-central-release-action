# Copyright Jiaqi Liu
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
name: "Maven Central Release Action"
description: "Deploying artifacts to Maven Central in one action"
branding:
  icon: "package"
  color: "green"

inputs:
  java-version:
    description: JDK version. Default to 17
    required: false
    default: '17'
  distribution:
    description: Java distribution. Default to adopt
    required: false
    default: 'adopt'
  user:
    description: The username of the GitHub user who has write access to push tags
    required: true
  email:
    description: The emails linked to the user on GitHub
    required: true
  gpg-keyname:
    description: The name of the GPG key to sign the released artifact
    required: true
  gpg-private-key:
    description: GPG private key to import
    required: true
  gpg-passphrase:
    description: Environment variable name for the GPG private key passphrase
    required: true
  server-username:
    description: Maven Central token username
    required: true
  server-password:
    description: Maven Central token password
    required: true
  version-properties:
    description: |
      The names of all properties (separated by comma, not white space between them) that contains the artifact version.
      For example, we might have a POM property called
      <properties><myproject.version>1.0-SNAPSHOT</myproject.version></properties>, then we will need to pass
      "myproject.version" via this option in order to fully set the release properties
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Tag for release
      run: |
        git config --global user.name ${{ inputs.user }}
        git config --global user.email ${{ inputs.email }}

        git clone https://github.com/QubitPi/hashicorp-aws.git ../hashicorp-aws
        cp ../hashicorp-aws/.github/version-bump/tag-for-release.bash .github/
        cp ../hashicorp-aws/.github/version-bump/upversion.py .github/
        .github/tag-for-release.bash
      shell: bash

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        # https://stackoverflow.com/a/77710731/14312712
        java-version: ${{ inputs.java-version }}
        distribution: ${{ inputs.distribution }}
        server-id: ${{ inputs.gpg-keyname }}
        settings-path: ${{ github.workspace }}
        gpg-private-key: ${{ inputs.gpg-private-key }}
        gpg-passphrase: ${{ inputs.gpg-passphrase }}
        server-username: ${{ inputs.server-username }}
        server-password: ${{ inputs.server-password }}

    - name: Prepare GPG
      run: |
        mkdir -p ~/.gnupg/
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        gpgconf --reload gpg-agent
      shell: bash

    - name: Configure settings.xml for Maven Central release
      uses: whelk-io/maven-settings-xml-action@v20
      with:
        servers: >
          [
            {
              "id": "${{ inputs.gpg-keyname }}",
              "username": "${{ inputs.server-username }}",
              "password": "${{ inputs.server-password }}",
              "passphrase": "${{ inputs.gpg-passphrase }}"
            }
          ]
        profiles: >
          [
            {
              "id": "${{ inputs.gpg-keyname }}",
              "properties": {
                "gpg.keyname": "${{ inputs.gpg-keyname }}"
              },
              "activation": {
                "activeByDefault": "true"
              }
            }
          ]

    - name: Bump version
      run: |
        git pull
        VERSION=$(git describe)
        echo "INFO Last tag: $VERSION"
        mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false

        IFS=',' read -ra VERSION_PROPERTY <<< "${{ inputs.version-properties }}"
        for p in "${VERSION_PROPERTY[@]}"; do
          mvn versions:update-property -Dproperty=$p -DnewVersion=$VERSION -DgenerateBackupPoms=false
        done

      shell: bash
    - name: Release
      run: mvn clean deploy -P release -DskipTests
      shell: bash
